# Logical Multi-Stage Build System
# Organized by dependency types for optimal caching

# Stage 1: System Base + Core Libraries
FROM --platform=linux/arm64 ubuntu:22.04 AS base-system

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV CFLAGS="-w -O2"
ENV CXXFLAGS="-w -O2"
ENV CPPFLAGS="-w"
ENV LDFLAGS="-w"

# Build environment
ENV FFMPEG_BUILD_ROOT=/opt/ffmpeg
ENV SOURCE_DIR=/opt/ffmpeg/source
ENV PKG_CONFIG_PATH=/opt/ffmpeg/lib/pkgconfig

# System dependencies (rarely change)
RUN apt-get update && apt-get install -y \
    build-essential curl git cmake ninja-build nasm yasm \
    pkg-config autoconf automake libtool meson python3 \
    python3-pip wget ca-certificates && \
    rm -rf /var/lib/apt/lists/* && \
    mkdir -p "$FFMPEG_BUILD_ROOT" "$SOURCE_DIR"

# Core libraries (zlib, iconv - foundation for everything)
WORKDIR $SOURCE_DIR
RUN echo "📦 Base libraries..." && \
    curl -L "https://github.com/madler/zlib/archive/refs/tags/v1.3.tar.gz" -o zlib.tar.gz && \
    curl -L "https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.17.tar.gz" -o libiconv.tar.gz && \
    tar -xzf zlib.tar.gz && rm zlib.tar.gz && \
    tar -xzf libiconv.tar.gz && rm libiconv.tar.gz

RUN cd zlib-* && \
    ./configure --prefix=$FFMPEG_BUILD_ROOT --static && \
    make -j$(nproc) && make install && \
    echo "✅ zlib"

RUN cd libiconv-* && \
    ./configure --prefix=$FFMPEG_BUILD_ROOT --disable-shared --enable-static && \
    make -j$(nproc) && make install && \
    echo "✅ libiconv"

# Stage 2: Audio Codecs
FROM base-system AS audio-codecs

WORKDIR $SOURCE_DIR
RUN echo "🎵 Audio codecs..." && \
    curl -L "https://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz" -o lame.tar.gz && \
    curl -L "https://archive.mozilla.org/pub/opus/opus-1.4.tar.gz" -o opus.tar.gz && \
    curl -L "https://downloads.xiph.org/releases/ogg/libogg-1.3.5.tar.gz" -o libogg.tar.gz && \
    curl -L "https://downloads.xiph.org/releases/vorbis/libvorbis-1.3.7.tar.gz" -o libvorbis.tar.gz && \
    curl -L "https://downloads.xiph.org/releases/flac/flac-1.4.3.tar.xz" -o flac.tar.xz && \
    tar -xzf lame.tar.gz && rm lame.tar.gz && \
    tar -xzf opus.tar.gz && rm opus.tar.gz && \
    tar -xzf libogg.tar.gz && rm libogg.tar.gz && \
    tar -xzf libvorbis.tar.gz && rm libvorbis.tar.gz && \
    tar -xJf flac.tar.xz && rm flac.tar.xz

# Build audio stack
RUN cd lame-* && \
    ./configure --prefix=$FFMPEG_BUILD_ROOT --disable-shared --enable-static --disable-dependency-tracking && \
    make -j$(nproc) && make install && echo "✅ LAME (MP3)"

RUN cd opus-* && \
    ./configure --prefix=$FFMPEG_BUILD_ROOT --disable-shared --enable-static --disable-doc && \
    make -j$(nproc) && make install && echo "✅ Opus"

RUN cd libogg-* && \
    ./configure --prefix=$FFMPEG_BUILD_ROOT --disable-shared --enable-static && \
    make -j$(nproc) && make install && echo "✅ libogg"

RUN cd libvorbis-* && \
    ./configure --prefix=$FFMPEG_BUILD_ROOT --disable-shared --enable-static --with-ogg=$FFMPEG_BUILD_ROOT && \
    make -j$(nproc) && make install && echo "✅ libvorbis"

RUN cd flac-* && \
    ./configure --prefix=$FFMPEG_BUILD_ROOT --disable-shared --enable-static --disable-doxygen-docs --disable-xmms-plugin && \
    make -j$(nproc) && make install && echo "✅ FLAC"

# Stage 3: Video Codecs
FROM audio-codecs AS video-codecs

WORKDIR $SOURCE_DIR
RUN echo "🎬 Video codecs..." && \
    git clone --depth 1 https://code.videolan.org/videolan/x264.git && \
    curl -L "https://bitbucket.org/multicoreware/x265/downloads/x265_3.5.tar.gz" -o x265.tar.gz && \
    git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git && \
    git clone --depth 1 https://aomedia.googlesource.com/aom.git && \
    tar -xzf x265.tar.gz && rm x265.tar.gz

# Build video stack
RUN cd x264 && \
    ./configure --prefix=$FFMPEG_BUILD_ROOT --enable-static --enable-pic --disable-cli && \
    make -j$(nproc) && make install && echo "✅ x264 (H.264)"

RUN cd x265_*/build/linux && \
    cmake -G "Unix Makefiles" \
        -DCMAKE_INSTALL_PREFIX=$FFMPEG_BUILD_ROOT \
        -DBUILD_SHARED_LIBS=OFF \
        -DENABLE_PIC=ON \
        -DENABLE_CLI=OFF \
        ../../source && \
    make -j$(nproc) && make install && echo "✅ x265 (HEVC)"

RUN cd libvpx && \
    ./configure --prefix=$FFMPEG_BUILD_ROOT \
        --enable-static --disable-shared --enable-pic \
        --disable-examples --disable-unit-tests && \
    make -j$(nproc) && make install && echo "✅ libvpx (VP8/VP9)"

RUN cd aom && mkdir build && cd build && \
    cmake -G "Unix Makefiles" \
        -DCMAKE_INSTALL_PREFIX=$FFMPEG_BUILD_ROOT \
        -DBUILD_SHARED_LIBS=OFF \
        -DENABLE_TESTS=OFF -DENABLE_EXAMPLES=OFF -DENABLE_DOCS=OFF \
        .. && \
    make -j$(nproc) && make install && echo "✅ AOM (AV1)"

# Stage 4: Image Processing
FROM video-codecs AS image-processing

WORKDIR $SOURCE_DIR
RUN echo "🖼️ Image processing..." && \
    curl -L "https://github.com/webmproject/libwebp/archive/refs/tags/v1.3.2.tar.gz" -o libwebp.tar.gz && \
    curl -L "https://github.com/uclouvain/openjpeg/archive/refs/tags/v2.5.0.tar.gz" -o openjpeg.tar.gz && \
    tar -xzf libwebp.tar.gz && rm libwebp.tar.gz && \
    tar -xzf openjpeg.tar.gz && rm openjpeg.tar.gz

RUN cd libwebp-* && \
    ./autogen.sh && \
    ./configure --prefix=$FFMPEG_BUILD_ROOT --disable-shared --enable-static --disable-dependency-tracking && \
    make -j$(nproc) && make install && echo "✅ libwebp"

RUN cd openjpeg-* && mkdir build && cd build && \
    cmake -G "Unix Makefiles" \
        -DCMAKE_INSTALL_PREFIX=$FFMPEG_BUILD_ROOT \
        -DBUILD_SHARED_LIBS=OFF -DBUILD_TESTING=OFF \
        .. && \
    make -j$(nproc) && make install && echo "✅ OpenJPEG"

# Stage 5: Text & Subtitles
FROM image-processing AS text-subtitles

WORKDIR $SOURCE_DIR
RUN echo "📝 Text & subtitles..." && \
    curl -L "https://download.savannah.gnu.org/releases/freetype/freetype-2.13.2.tar.xz" -o freetype.tar.xz && \
    curl -L "https://www.freedesktop.org/software/fontconfig/release/fontconfig-2.14.2.tar.xz" -o fontconfig.tar.xz && \
    curl -L "https://github.com/fribidi/fribidi/releases/download/v1.0.13/fribidi-1.0.13.tar.xz" -o fribidi.tar.xz && \
    curl -L "https://github.com/harfbuzz/harfbuzz/releases/download/8.3.0/harfbuzz-8.3.0.tar.xz" -o harfbuzz.tar.xz && \
    curl -L "https://github.com/libass/libass/releases/download/0.17.1/libass-0.17.1.tar.xz" -o libass.tar.xz && \
    tar -xJf freetype.tar.xz && rm freetype.tar.xz && \
    tar -xJf fontconfig.tar.xz && rm fontconfig.tar.xz && \
    tar -xJf fribidi.tar.xz && rm fribidi.tar.xz && \
    tar -xJf harfbuzz.tar.xz && rm harfbuzz.tar.xz && \
    tar -xJf libass.tar.xz && rm libass.tar.xz

RUN cd freetype-* && \
    ./configure --prefix=$FFMPEG_BUILD_ROOT --disable-shared --enable-static && \
    make -j$(nproc) && make install && echo "✅ FreeType"

RUN cd fribidi-* && \
    ./configure --prefix=$FFMPEG_BUILD_ROOT --disable-shared --enable-static && \
    make -j$(nproc) && make install && echo "✅ FriBidi"

RUN cd harfbuzz-* && \
    ./configure --prefix=$FFMPEG_BUILD_ROOT --disable-shared --enable-static --with-freetype && \
    make -j$(nproc) && make install && echo "✅ HarfBuzz"

RUN cd fontconfig-* && \
    ./configure --prefix=$FFMPEG_BUILD_ROOT --disable-shared --enable-static --with-freetype-config=$FFMPEG_BUILD_ROOT/bin/freetype-config && \
    make -j$(nproc) && make install && echo "✅ FontConfig"

RUN cd libass-* && \
    ./configure --prefix=$FFMPEG_BUILD_ROOT --disable-shared --enable-static --with-fontconfig --with-harfbuzz --with-fribidi && \
    make -j$(nproc) && make install && echo "✅ libass"

# Stage 6: Video Filters & Utilities
FROM text-subtitles AS video-filters

WORKDIR $SOURCE_DIR
RUN echo "🔧 Video filters..." && \
    git clone --depth 1 https://github.com/georgmartius/vid.stab.git && \
    curl -L "https://github.com/sekrit-twc/zimg/archive/refs/tags/release-3.0.5.tar.gz" -o zimg.tar.gz && \
    tar -xzf zimg.tar.gz && rm zimg.tar.gz

RUN cd vid.stab && mkdir build && cd build && \
    cmake -G "Unix Makefiles" \
        -DCMAKE_INSTALL_PREFIX=$FFMPEG_BUILD_ROOT \
        -DBUILD_SHARED_LIBS=OFF \
        .. && \
    make -j$(nproc) && make install && echo "✅ vid.stab"

RUN cd zimg-* && \
    ./autogen.sh && \
    ./configure --prefix=$FFMPEG_BUILD_ROOT --disable-shared --enable-static && \
    make -j$(nproc) && make install && echo "✅ zimg"

# Stage 7: FFmpeg Final
FROM video-filters AS ffmpeg-final

# Add build scripts
COPY scripts/ /scripts/
RUN chmod +x /scripts/*.sh

WORKDIR $SOURCE_DIR
RUN echo "🎬 Building FFmpeg..." && \
    git clone --depth 1 https://git.ffmpeg.org/ffmpeg.git && \
    cd ffmpeg && \
    /scripts/configure-ffmpeg.sh && \
    make -j$(nproc) && make install && \
    echo "✅ FFmpeg complete"

# Create final marker
RUN echo "ffmpeg-complete-$(date +%Y%m%d-%H%M)" > /opt/ffmpeg/build.marker && \
    echo "🎉 FFmpeg build completed!" && \
    echo "📈 Total libraries: $(ls -1 $FFMPEG_BUILD_ROOT/lib/*.a 2>/dev/null | wc -l)" && \
    echo "🎬 FFmpeg version: $($FFMPEG_BUILD_ROOT/bin/ffmpeg -version | head -1)"

# Production stage
FROM --platform=linux/arm64 ubuntu:22.04 AS production

COPY --from=ffmpeg-final /opt/ffmpeg /opt/ffmpeg
COPY scripts/docker-entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh && \
    apt-get update && apt-get install -y ca-certificates && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /opt/ffmpeg
ENTRYPOINT ["/entrypoint.sh"]
CMD ["ffmpeg", "-version"] 