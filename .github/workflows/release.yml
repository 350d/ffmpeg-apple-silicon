name: Build Release Artifacts - DISABLED

on:
  # COMPLETELY DISABLED - replaced by build-ffmpeg-final.yml
  workflow_dispatch:
    inputs:
      force_enable:
        description: 'This workflow is disabled'
        required: true
        default: 'disabled'

jobs:
  build-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Reduced timeout
    if: false  # COMPLETELY DISABLED
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/arm64
        
    - name: Get tag name
      id: tag_name
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Build Docker image locally
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.cached
        platforms: linux/arm64
        push: false
        load: true
        build-args: |
          TARGETPLATFORM=linux/arm64
        tags: |
          ffmpeg-apple-silicon:${{ steps.tag_name.outputs.tag }}
          ffmpeg-apple-silicon:latest
        cache-from: type=gha,scope=v2.3.0
        cache-to: type=gha,mode=max,scope=v2.3.0
        outputs: type=docker
        
    - name: Extract binaries from Docker image
      run: |
        # Create temporary container
        docker create --name temp_container ffmpeg-apple-silicon:${{ steps.tag_name.outputs.tag }}
        
        # Extract binaries
        mkdir -p release
        docker cp temp_container:/opt/ffmpeg/bin/ffmpeg release/ || true
        docker cp temp_container:/opt/ffmpeg/bin/ffprobe release/ || true
        
        # Clean up
        docker rm temp_container
        
        # Check what we got
        ls -la release/
        
        # Create archive if we have binaries
        if [ -f "release/ffmpeg" ]; then
          cd release
          tar -czf ../ffmpeg-apple-silicon-${{ steps.tag_name.outputs.tag }}.tar.gz *
          cd ..
          
          # Calculate checksums
          sha256sum ffmpeg-apple-silicon-${{ steps.tag_name.outputs.tag }}.tar.gz > checksums.txt
        else
          echo "No ffmpeg binary found - creating info file instead"
          echo "Docker build completed but binary extraction failed" > build-info.txt
          echo "Tag: ${{ steps.tag_name.outputs.tag }}" >> build-info.txt
          echo "Build time: $(date)" >> build-info.txt
        fi
        
    - name: Test extracted binaries (if available)
      run: |
        if [ -f "release/ffmpeg" ]; then
          chmod +x release/*
          ./release/ffmpeg -version
          if [ -f "release/ffprobe" ]; then
            ./release/ffprobe -version
          fi
        else
          echo "No binaries to test - build info:"
          cat build-info.txt || echo "No build info available"
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag_name.outputs.tag }}
        name: FFmpeg Apple Silicon ${{ steps.tag_name.outputs.tag }}
        body: |
          ## FFmpeg for Apple Silicon - ${{ steps.tag_name.outputs.tag }}
          
          **Ultra-fast minimal build with essential codecs**
          
          ### 📦 What's included:
          - `ffmpeg` - H.264 (x264) and MP3 (lame) support
          - `ffprobe` - Stream analyzer (if available)
          
          ### ✨ Features:
          - **ARM64 Optimized** - Native Apple Silicon performance  
          - **Essential Codecs** - H.264 encoding/decoding, MP3 audio
          - **Fast Build** - 6-10 minutes vs 2+ hours previously
          - **Minimal Size** - Only essential components
          
          ### 🚀 Quick Start:
          ```bash
          # Download and extract
          curl -L -O https://github.com/${{ github.repository }}/releases/download/${{ steps.tag_name.outputs.tag }}/ffmpeg-apple-silicon-${{ steps.tag_name.outputs.tag }}.tar.gz
          tar -xzf ffmpeg-apple-silicon-${{ steps.tag_name.outputs.tag }}.tar.gz
          
          # Remove from quarantine (macOS)
          xattr -dr com.apple.quarantine ffmpeg ffprobe 2>/dev/null || true
          codesign -s - ffmpeg ffprobe 2>/dev/null || true
          
          # Test
          ./ffmpeg -version
          ```
          
          ### 📋 Technical Details:
          - **Build Date**: $(date '+%Y-%m-%d %H:%M:%S UTC')
          - **Platform**: Apple Silicon (ARM64)
          - **Codecs**: x264 (H.264), lame (MP3)
          - **Build Time**: ~6-10 minutes
          
          ### 🔍 Checksums:
          See `checksums.txt` for SHA256 verification.
          
        files: |
          ffmpeg-apple-silicon-${{ steps.tag_name.outputs.tag }}.tar.gz
          checksums.txt
          build-info.txt
        draft: false
        prerelease: false

  build-native-macos:
    runs-on: macos-14  # Apple Silicon runner
    timeout-minutes: 180
    if: false  # Disabled for now - enable when needed
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install build dependencies
      run: |
        brew install cmake nasm pkg-config automake autoconf libtool
        
    - name: Build FFmpeg natively
      run: |
        chmod +x scripts/*.sh
        ./scripts/build.sh
        
    - name: Create native archive
      run: |
        mkdir -p native-release
        cp bin/* native-release/
        cd native-release
        tar -czf ../ffmpeg-apple-silicon-native-${{ steps.tag_name.outputs.tag }}.tar.gz *
        cd ..
        sha256sum ffmpeg-apple-silicon-native-${{ steps.tag_name.outputs.tag }}.tar.gz >> checksums-native.txt
        
    - name: Upload native artifacts
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag_name.outputs.tag }}
        files: |
          ffmpeg-apple-silicon-native-${{ steps.tag_name.outputs.tag }}.tar.gz
          checksums-native.txt 