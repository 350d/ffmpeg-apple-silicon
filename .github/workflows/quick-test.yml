name: Quick Test Build

on:
  pull_request:
    branches: [ main, master ]
    paths:
      - 'scripts/configure-ffmpeg*.sh'
      - 'Dockerfile*'
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run this test workflow'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ffmpeg-test

jobs:
  validate-configs:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate configuration syntax
      run: |
        # Check all configure scripts for syntax
        echo "üîç Checking script syntax..."
        bash -n scripts/configure-ffmpeg.sh
        bash -n scripts/configure-ffmpeg-test.sh
        bash -n scripts/configure-ffmpeg-example.sh
        bash -n scripts/build-dependencies.sh
        bash -n scripts/show-progress.sh
        
        echo "‚úÖ All scripts have valid syntax"
        
    - name: Check for important flags
      run: |
        echo "üîç Checking for required flags..."
        
        if grep -q "\-\-enable-pic" scripts/configure-ffmpeg.sh; then
          echo "‚úÖ PIC flag is enabled in main config"
        else
          echo "‚ùå PIC flag is missing in main config"
          exit 1
        fi
        
        if grep -q "\-\-enable-pic" scripts/configure-ffmpeg-test.sh; then
          echo "‚úÖ PIC flag is enabled in test config"
        else
          echo "‚ùå PIC flag is missing in test config"
          exit 1
        fi
        
        # Check that deprecated mv-export flag is NOT present
        if grep -q "\-\-enable-mv-export" scripts/configure-ffmpeg*.sh; then
          echo "‚ùå Deprecated mv-export flag found"
          exit 1
        else
          echo "‚úÖ No deprecated mv-export flags found"
        fi

        echo "‚úÖ All required flags validated"

  ultra-fast-version-test:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Ultra-fast FFmpeg validation test
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.test
        platforms: linux/arm64
        push: false
        tags: ffmpeg-version-test:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true
        
    - name: Test validation output
      run: |
        echo "üß™ Testing validation output..."
        
        # Run our validation test
        docker run --rm ffmpeg-version-test:latest
        
        echo "‚úÖ Ultra-fast validation test passed!"

  dockerfile-syntax:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate Dockerfile syntax
      run: |
        echo "üîç Checking Dockerfile syntax..."
        
        # Check main Dockerfile
        docker run --rm -i hadolint/hadolint < Dockerfile || echo "Hadolint warnings ignored"
        
        # Check quicktest Dockerfile  
        docker run --rm -i hadolint/hadolint < Dockerfile.test || echo "Hadolint warnings ignored"
        
        echo "‚úÖ Dockerfile syntax validated"

    - name: Check Docker build context
      run: |
        echo "üîç Checking Docker build context..."
        
        # Ensure required scripts exist
        test -f scripts/configure-ffmpeg.sh || (echo "‚ùå Main config script missing" && exit 1)
        test -f scripts/configure-ffmpeg-test.sh || (echo "‚ùå Test config script missing" && exit 1)
        test -f scripts/build-dependencies.sh || (echo "‚ùå Dependencies script missing" && exit 1)
        test -f scripts/show-progress.sh || (echo "‚ùå Progress script missing" && exit 1)
        test -f scripts/docker-entrypoint.sh || (echo "‚ùå Docker entrypoint missing" && exit 1)
        
        # Check scripts are executable
        test -x scripts/configure-ffmpeg.sh || chmod +x scripts/configure-ffmpeg.sh
        test -x scripts/configure-ffmpeg-test.sh || chmod +x scripts/configure-ffmpeg-test.sh
        test -x scripts/build-dependencies.sh || chmod +x scripts/build-dependencies.sh
        test -x scripts/show-progress.sh || chmod +x scripts/show-progress.sh
        test -x scripts/docker-entrypoint.sh || chmod +x scripts/docker-entrypoint.sh
        
        echo "‚úÖ Docker build context validated"

  summary:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    needs: [validate-configs, ultra-fast-version-test, dockerfile-syntax]
    
    steps:
    - name: Test Summary
      run: |
        echo "üéâ Ultra-Fast Test Summary"
        echo "=========================="
        echo "‚úÖ Configuration syntax validated"
        echo "‚úÖ Required flags present"  
        echo "‚úÖ Ultra-fast version test passed"
        echo "‚úÖ Dockerfile syntax validated"
        echo "‚úÖ Build context validated"
        echo ""
        echo "‚ö° Total time: ~5-8 minutes (under GitHub free tier limit)"
        echo "üöÄ Ready for full build workflow" 