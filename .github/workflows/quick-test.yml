name: Quick Test Build

on:
  push:
    branches: [ main, master ]
    paths:
      - 'scripts/configure-ffmpeg*.sh'
      - 'Dockerfile*'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'scripts/configure-ffmpeg*.sh'
      - 'Dockerfile*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ffmpeg-test

jobs:
  validate-configs:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate configuration syntax
      run: |
        # Check all configure scripts for syntax
        echo "üîç Checking script syntax..."
        bash -n scripts/configure-ffmpeg.sh
        bash -n scripts/configure-ffmpeg-test.sh
        bash -n scripts/configure-ffmpeg-example.sh
        bash -n scripts/build-dependencies.sh
        bash -n scripts/show-progress.sh
        
        echo "‚úÖ All scripts have valid syntax"
        
    - name: Check for important flags
      run: |
        echo "üîç Checking for required flags..."
        
        if grep -q "\-\-enable-pic" scripts/configure-ffmpeg.sh; then
          echo "‚úÖ PIC flag is enabled in main config"
        else
          echo "‚ùå PIC flag is missing in main config"
          exit 1
        fi
        
        if grep -q "\-\-enable-pic" scripts/configure-ffmpeg-test.sh; then
          echo "‚úÖ PIC flag is enabled in test config"
        else
          echo "‚ùå PIC flag is missing in test config"
          exit 1
        fi
        
        # Check that deprecated mv-export flag is NOT present
        if grep -q "\-\-enable-mv-export" scripts/configure-ffmpeg*.sh; then
          echo "‚ùå Deprecated mv-export flag found"
          exit 1
        else
          echo "‚úÖ No deprecated mv-export flags found"
        fi

        echo "‚úÖ All required flags validated"

  quick-compilation-test:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Quick FFmpeg build test (minimal features)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.test
        platforms: linux/arm64
        push: false
        tags: ffmpeg-quick-test:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test compiled FFmpeg
      run: |
        echo "üß™ Testing quick-compiled FFmpeg..."
        
        # Test basic functionality
        docker run --rm ffmpeg-quick-test:latest cat /tmp/test-result.txt
        
        echo "‚úÖ Quick compilation test passed!"

    - name: Test FFmpeg configuration (dry run)
      run: |
        echo "üîç Testing FFmpeg configuration dry run..."
        
        # Install minimal dependencies for configure test
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config git nasm yasm
        
        # Download FFmpeg source for configure test
        git clone --depth 1 https://git.ffmpeg.org/ffmpeg.git /tmp/ffmpeg
        cd /tmp/ffmpeg
        
        # Set environment variables
        export FFMPEG_BUILD_ROOT=/tmp/test-build
        export BIN_DIR=/tmp/test-build/bin
        export PKG_CONFIG_PATH=/tmp/test-build/lib/pkgconfig
        mkdir -p "$FFMPEG_BUILD_ROOT" "$BIN_DIR"
        
        # Test configure command (dry run - only configure, no build)
        echo "üîß Running FFmpeg configure test..."
        ./configure \
          --prefix="$FFMPEG_BUILD_ROOT" \
          --bindir="$BIN_DIR" \
          --pkg-config-flags="--static" \
          --enable-gpl \
          --enable-version3 \
          --enable-static \
          --disable-shared \
          --enable-pic \
          --arch=arm64 \
          --cc=clang \
          --disable-everything \
          --enable-encoder=libx264 \
          --enable-decoder=h264 \
          --enable-protocol=file \
          --enable-muxer=mp4 \
          --enable-demuxer=mov \
          --quiet
        
        echo "‚úÖ FFmpeg configure completed successfully"

  dockerfile-syntax:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate Dockerfile syntax
      run: |
        echo "üîç Checking Dockerfile syntax..."
        
        # Check main Dockerfile
        docker run --rm -i hadolint/hadolint < Dockerfile || echo "Hadolint warnings ignored"
        
        # Check test Dockerfile  
        docker run --rm -i hadolint/hadolint < Dockerfile.test || echo "Hadolint warnings ignored"
        
        echo "‚úÖ Dockerfile syntax validated"

    - name: Check Docker build context
      run: |
        echo "üîç Checking Docker build context..."
        
        # Ensure required scripts exist
        test -f scripts/configure-ffmpeg.sh || (echo "‚ùå Main config script missing" && exit 1)
        test -f scripts/configure-ffmpeg-test.sh || (echo "‚ùå Test config script missing" && exit 1)
        test -f scripts/build-dependencies.sh || (echo "‚ùå Dependencies script missing" && exit 1)
        test -f scripts/show-progress.sh || (echo "‚ùå Progress script missing" && exit 1)
        test -f scripts/docker-entrypoint.sh || (echo "‚ùå Docker entrypoint missing" && exit 1)
        
        # Check scripts are executable
        test -x scripts/configure-ffmpeg.sh || chmod +x scripts/configure-ffmpeg.sh
        test -x scripts/configure-ffmpeg-test.sh || chmod +x scripts/configure-ffmpeg-test.sh
        test -x scripts/build-dependencies.sh || chmod +x scripts/build-dependencies.sh
        test -x scripts/show-progress.sh || chmod +x scripts/show-progress.sh
        test -x scripts/docker-entrypoint.sh || chmod +x scripts/docker-entrypoint.sh
        
        echo "‚úÖ Docker build context validated"

  motion-vectors-api:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate motion vectors documentation
      run: |
        echo "üîç Checking motion vectors documentation..."
        
        # Check that documentation mentions modern API
        if grep -q "flags2.*export_mvs" MOTION_VECTORS.md; then
          echo "‚úÖ Modern motion vector API documented"
        else
          echo "‚ùå Modern motion vector API not documented"
          exit 1
        fi
        
        # Check that deprecated flag is not mentioned as current
        if grep -q "enable-mv-export.*deprecated" MOTION_VECTORS.md; then
          echo "‚úÖ Deprecated flag correctly marked"
        else
          echo "‚ö†Ô∏è  Deprecated flag documentation may need update"
        fi
        
        echo "‚úÖ Motion vectors documentation validated"

  summary:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    needs: [validate-configs, quick-compilation-test, dockerfile-syntax, motion-vectors-api]
    
    steps:
    - name: Test Summary
      run: |
        echo "üéâ Quick Test Summary"
        echo "==================="
        echo "‚úÖ Configuration syntax validated"
        echo "‚úÖ Required flags present"  
        echo "‚úÖ Quick compilation test passed"
        echo "‚úÖ Dockerfile syntax validated"
        echo "‚úÖ Motion vectors API updated"
        echo "‚úÖ Build context validated"
        echo ""
        echo "‚ö° Total time: ~10-12 minutes (under GitHub free tier limit)"
        echo "üöÄ Ready for full build workflow" 